<?xml version="1.0" encoding="utf-8"?>

<!--
This is the master template for all screens:
A header text, player controls and a client area.
Below the client area, the navigation bar is visible.

Usage:

  <Include
      xmlns="www.team-mediaportal.com/2008/mpf/directx"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      Source="screens\master.xaml">
    <Include.Resources>
      <ResourceWrapper x:Key="Header_Text">
        [Header text]
      </ResourceWrapper>
      <ControlTemplate x:Key="Client_Template">
        [UI element to be displayed in the client area]
      </ControlTemplate>
    </Include.Resources>
  </Include>

Parameters which have to be accessible by a DynamicResource lookup:
 - Header_Text (String): The text to be displayed as header
 - Client_Template (ConrolTemplate): Template for element to be shown in the client area.
-->

<Screen
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mp_special_workflow="clr-namespace:MediaPortal.UI.SkinEngine.SpecialElements.Workflow;assembly=SkinEngine"
    xmlns:mp_special_controls="clr-namespace:MediaPortal.UI.SkinEngine.SpecialElements.Controls;assembly=SkinEngine"
    mp_special_workflow:WorkflowContext.StateSlot="Root"
    x:Name="Screen"
    >

  <Grid x:Name="RootElement">
    <Grid.RowDefinitions>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>
    </Grid.ColumnDefinitions>

    <Grid.Resources>
      <Model x:Key="MouseModel" Id="CA6428A7-A6E2-4dd3-9661-F89CEBAF8E62"/>
      <Model x:Key="SkinSettingsModel" Id="13961014-16C4-4361-9751-8E2C585EFD44"/>
      <Model x:Key="ScreenModeModel" Id="6A232D95-9BDE-4005-905E-69CB092B012B"/>
      <Model x:Key="StateModel" Id="B23D8DC1-405E-4564-92D0-E247C299FFAE"/>
    </Grid.Resources>

    <DockPanel Grid.Column="0" Grid.Row="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" LastChildFill="False">
      <Grid x:Name="HeaderPanel" Margin="5" DockPanel.Dock="Top">
        <Grid.RowDefinitions>
          <RowDefinition Height="100"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="50"/>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

      </Grid>
      <!-- FooterPanel -->
      <Grid x:Name="FooterPanel" Margin="2" DockPanel.Dock="Bottom">
        <Grid.RowDefinitions>
          <RowDefinition Height="100"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <StackPanel x:Name="PlayerControls" Grid.Column="1" Grid.Row="0" Orientation="Horizontal">
          <mp_special_controls:PlayerControl Margin="15" Style="{ThemeResource NavigationScreenPlayerControlStyle}" 
                  AutoVisibility="True" PlayerContext="PrimaryPlayer" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
          <mp_special_controls:PlayerControl Margin="15" Style="{ThemeResource NavigationScreenPlayerControlStyle}"
                  AutoVisibility="True" PlayerContext="SecondaryPlayer" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
        </StackPanel>
      </Grid>
      <!-- Order matters here: The client area control has to be the last control (LastChildFill) -->
      <Control DockPanel.Dock="Center" x:Name="ClientArea" Template="{DynamicResource Client_Template}"/>
      
    </DockPanel>

    <Grid x:Name="WindowButtonsPanel" HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="220,10,0,10">
      <Grid.Resources>
        <Model x:Key="NotificationsModel" Id="843F373D-0B4B-47ba-8DD1-0D18F00FAAD3"/>
        <Model x:Key="StateModel" Id="B23D8DC1-405E-4564-92D0-E247C299FFAE"/>
        <Model x:Key="LoginModel" Id="82582433-FD64-41bd-9059-7F662DBDA713"/>
        <Model x:Key="MenuModel" Id="9E9D0CD9-4FDB-4c0f-A0C4-F356E151BDE0"/>
      </Grid.Resources>

      <Grid.RenderTransform>
        <TranslateTransform X="0"/>
      </Grid.RenderTransform>

      <!--Slide content in and out depending on hidden menu state-->
      <Grid.Triggers>
        <DataTrigger Binding="{Binding Source={StaticResource MenuModel},Path=IsMenuOpen}" Value="True">
          <DataTrigger.EnterActions>
            <BeginStoryboard x:Name="SlideIn">
              <BeginStoryboard.Storyboard>
                <Storyboard>
                  <DoubleAnimation
                           Storyboard.TargetName="WindowButtonsPanel"
                           Storyboard.TargetProperty="RenderTransform.X"
                           From="-200" To="0" BeginTime="0:0:0" Duration="00:00:00.35"
                           FillBehavior="HoldEnd"/>
                </Storyboard>
              </BeginStoryboard.Storyboard>
            </BeginStoryboard>
          </DataTrigger.EnterActions>
          <DataTrigger.ExitActions>
            <BeginStoryboard x:Name="SlideOut">
              <BeginStoryboard.Storyboard>
                <Storyboard>
                  <DoubleAnimation
                           Storyboard.TargetName="WindowButtonsPanel"
                           Storyboard.TargetProperty="RenderTransform.X"
                           From="0" To="-200" BeginTime="0:0:0" Duration="00:00:00.35"
                           FillBehavior="HoldEnd"/>
                </Storyboard>
              </BeginStoryboard.Storyboard>
            </BeginStoryboard>
            <StopStoryboard BeginStoryboardName="SlideIn"/>
          </DataTrigger.ExitActions>
        </DataTrigger>
      </Grid.Triggers>

      <Grid.RowDefinitions>
        <RowDefinition Height="90"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="450"/>
      </Grid.ColumnDefinitions>
      
      <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
        <StackPanel Orientation="Horizontal" Margin="0,0,20,0">
          <StackPanel.Triggers>
            <!--Close the hidden menu when the main content gets focus-->
            <EventTrigger RoutedEvent="FrameworkElement.GotFocus">
              <TriggerCommand Command="{Command Source={StaticResource MenuModel}, Path=CloseMenu}"/>
            </EventTrigger>
          </StackPanel.Triggers>
          <Button Height="80" Width="80" Style="{ThemeResource EmptyButtonStyle}" VerticalAlignment="Center" 
                  Command="{Command Source={Service WorkflowManager},Path=NavigatePush,Parameters=BBFA7DB7-5055-48D5-A904-0F0C79849369}">
            <DockPanel LastChildFill="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Image x:Name="ItemImage" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="power.png" Opacity="0.6" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=!HasFocus}"/>
              <Image x:Name="ItemImageFocus" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="power_focus.png" Opacity="1" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=HasFocus}"/>
            </DockPanel>
          </Button>
          <Button Height="80" Width="80" Style="{ThemeResource EmptyButtonStyle}" IsVisible="{Binding Source={StaticResource LoginModel},Path=EnableUserLogin}"
                  Command="{Command Source={Service WorkflowManager},Path=NavigatePush,Parameters=2529B0F0-8415-4A4E-971B-38D6CDD2406A}">
            <DockPanel LastChildFill="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Image x:Name="ItemImage2" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="user.png" Opacity="0.6" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=!HasFocus}"/>
              <Image x:Name="ItemImageFocus2" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="user_focus.png" Opacity="1" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=HasFocus}"/>
            </DockPanel>
          </Button>
          <Button Height="80" Width="80" Style="{ThemeResource EmptyButtonStyle}"
                  Command="{Command Source={Service WorkflowManager},Path=NavigatePush,Parameters=E7422BB8-2779-49ab-BC99-E3F56138061B}">
            <DockPanel LastChildFill="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Image x:Name="ItemImage3" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="settings.png" Opacity="0.6" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=!HasFocus}"/>
              <Image x:Name="ItemImageFocus3" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" 
                     DockPanel.Dock="Center" Source="settings_focus.png" Opacity="1" Margin="10"
                     IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}},Path=HasFocus}"/>
            </DockPanel>
          </Button>
        </StackPanel>
        
        <StackPanel Orientation="Horizontal" Context="{Service Window}" IsVisible="{Binding Source={StaticResource MouseModel},Path=IsMouseUsed}" VerticalAlignment="Center">
          <Control Style="{ThemeResource NotificationControlStyle}" Margin="5,2,5,5" IsVisible="{Binding Source={StaticResource NotificationsModel},Path=IsNotificationsHintVisible}"
                     HorizontalAlignment="Left" VerticalAlignment="Center"/>
        </StackPanel>
        <!--Button Style="{ThemeResource UserButtonStyle}" Margin="0,0,5,0" IsVisible="{Binding Source={StaticResource LoginModel},Path=EnableUserLogin}"
                Command="{Command Source={Service WorkflowManager},Path=NavigatePush,Parameters=2529B0F0-8415-4A4E-971B-38D6CDD2406A}"/-->
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0,0,5,0"
                    DataContext="{Binding Source={StaticResource StateModel}, Path=[C37B62D0-8E87-42A4-877E-B41944DA9FC9]}"
                    IsVisible="{Binding Converter={StaticResource ReferenceToBoolConverter}}">
          <Label FontSize="{ThemeResource SmallerFontSize}" Margin="10,0,0,0"
                     Color="{ThemeResource TextColor}" VerticalAlignment="Center" HorizontalAlignment="Right">
            <Label.IsVisible>
              <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0}>=0">
                <Binding Path="Progress"/>
              </MultiBinding>
            </Label.IsVisible>
            <Label.Content>
              <Binding Path="Progress" Converter="{StaticResource StringFormatConverter}" ConverterParameter="{}{0}%"/>
            </Label.Content>
          </Label>
          <Button Style="{ThemeResource ImportingButtonStyle}" IsVisible="{Binding IsImporting}"/>
        </StackPanel>
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0,0,5,0"
                    DataContext="{Binding Source={StaticResource StateModel}, Path=[2A58935C-3363-4FA1-B48D-1EF0E81F830D]}"
                    IsVisible="{Binding Converter={StaticResource ReferenceToBoolConverter}}">
          <Button Style="{ThemeResource RecordingButtonStyle}" IsVisible="{Binding IsRecording}"/>
        </StackPanel>
        <mp_special_controls:PlayerControl Style="{ThemeResource CPPlayerControlStyle}" VerticalAlignment="Center"
                  AutoVisibility="True" HorizontalAlignment="Left">
        </mp_special_controls:PlayerControl>
      </StackPanel>
    </Grid>

    <!-- Time Label -->
    <Grid HorizontalAlignment="Right" Margin="0,25,25,0">
      <Grid.Resources>
        <Model x:Key="TimeModel" Id="E821B1C8-0666-4339-8027-AA45A4F6F107"/>
      </Grid.Resources>
      <Label Content="{Binding Source={StaticResource TimeModel}, Path=CurrentTime}" FontSize="{ThemeResource NormalFontSize}" 
             Color="{ThemeResource TextColor}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
    </Grid>

    <!-- Mouse control buttons -->
    <Grid x:Name="MouseButtonsPanel" HorizontalAlignment="Right" VerticalAlignment="Top" >
      <StackPanel Orientation="Horizontal">
        <StackPanel Margin="0,0,0,0" Orientation="Horizontal" Context="{Service Window}"  IsVisible="{Binding Source={StaticResource MouseModel},Path=IsMouseUsed}">
          <Button x:Name="WindowedButton" Style="{ThemeResource MinMaxButtonStyle}" Margin="0,0,0,0" HorizontalAlignment="Right"
                  Command="{Command Source={Service Window},Path=SwitchMode,Parameters=NormalWindowed}">
            <Button.IsVisible>
              <Binding Source="{StaticResource ScreenModeModel}" Path="CurrentScreenMode" Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {ScreenMode}.{FullScreen}"/>
            </Button.IsVisible>
          </Button>
          <Button x:Name="MaximizedButton" Style="{ThemeResource MinMaxButtonStyle}" Margin="0,0,0,0" HorizontalAlignment="Right"
                  Command="{Command Source={Service Window},Path=SwitchMode,Parameters=FullScreen}">
            <Button.IsVisible>
              <Binding Source="{StaticResource ScreenModeModel}" Path="CurrentScreenMode" Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} != {ScreenMode}.{FullScreen}"/>
            </Button.IsVisible>
          </Button>
          <Button x:Name="ExitButton" Style="{ThemeResource ExitButtonStyle}" Margin="0,0,0,0" HorizontalAlignment="Right"
                  Command="{Command Source={Service Window},Path=Shutdown}">
            <Button.IsVisible>
              <Binding Source="{StaticResource ScreenModeModel}" Path="CurrentScreenMode" Converter="{StaticResource ExpressionValueConverter}" ConverterParameter="{}{0} == {ScreenMode}.{FullScreen}"/>
            </Button.IsVisible>
          </Button>
        </StackPanel>
      </StackPanel>
    </Grid>

  </Grid>
</Screen>
