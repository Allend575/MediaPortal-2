<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System"
    xmlns:collections="clr-namespace:MediaPortal.UI.Presentation.DataObjects;assembly=MediaPortal.UI"
    xmlns:mp_special_controls="clr-namespace:MediaPortal.UI.SkinEngine.SpecialElements.Controls"
    DependsOnStyleResources="Colors,Buttons,Consts"
    >

  <!-- ************************** Default conversions ****************************** -->
  <DataTemplate DataType="{x:Type system:String}">
    <Label Content="{Binding}" Color="{ThemeResource TextColor}"/>
  </DataTemplate>

  <!-- ***************************** Converters ********************************* -->

  <ExpressionMultiValueConverter x:Key="ExpressionMultiValueConverter"/>
  <ExpressionValueConverter x:Key="ExpressionValueConverter"/>
  <CommaSeparatedValuesConverter x:Key="CommaSeparatedValuesConverter"/>

  <!-- ***************************** Brushes ******************************** -->

  <!-- default brush used to paint the background of a page/window -->
  <ResourceWrapper x:Key="BackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <GradientStop Color="{ThemeResource BackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource BackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <!-- default brush used to paint the background of a dialog -->
  <ResourceWrapper x:Key="DialogBackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <RadialGradientBrush.RelativeTransform>
        <TransformGroup>
          <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.071" ScaleY="1.29"/>
          <TranslateTransform X="-0.036" Y="-0.146"/>
        </TransformGroup>
      </RadialGradientBrush.RelativeTransform>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <ResourceWrapper x:Key="KeyBindingsPanelBackgroundBrush" Freezable="true">
  	<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient1Color}" Offset="0"/>
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient2Color}" Offset="0.3"/>
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient3Color}" Offset="1"/>
  	</LinearGradientBrush>
  </ResourceWrapper>
  <!-- ***************************** Progress bar ******************************** -->

  <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid x:Name="ProgressBarGrid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="ProgressBarTrack" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarBorderColor}"/>
            <Rectangle x:Name="ProgressBarIndicator" Width="{TemplateBinding PartIndicatorWidth}" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarFillColor}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ***************************** ScrollViewer styles ********************************* -->

  <Style x:Key="DefaultScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!-- Content -->
            <!-- The opacity mask is necessary to avoid drawing children outside the ScrollContentPresenter's range -->
            <ScrollContentPresenter Grid.Row="0" Grid.Column="0" Content="{TemplateBinding Content}"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
            <!-- ScrollBar X -->
            <Grid x:Name="ScrollBarX" IsVisible="{TemplateBinding ScrollBarXVisible}" Grid.Row="1" Grid.Column="0" Margin="2">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarXBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4"
                  ActualWidth="{TemplateBinding Path=ScrollBarXSize,Mode=OneWayToSource}">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
                <StackPanel Width="{TemplateBinding ScrollBarXKnobPos}"/>
                <Rectangle x:Name="ScrollBarXKnob" Width="{TemplateBinding ScrollBarXKnobWidth}" Height="{ThemeResource ScrollBarWidth}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
            <!-- ScrollBar Y -->
            <Grid x:Name="ScrollBarY" IsVisible="{TemplateBinding ScrollBarYVisible}" Grid.Row="0" Grid.Column="1" Margin="2">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarYBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4"
                  ActualHeight="{TemplateBinding Path=ScrollBarYSize,Mode=OneWayToSource}">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Vertical">
                <StackPanel Height="{TemplateBinding ScrollBarYKnobPos}"/>
                <Rectangle x:Name="ScrollBarYKnob" Width="{ThemeResource ScrollBarWidth}" Height="{TemplateBinding ScrollBarYKnobHeight}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *********************************** TextBox style ********************************* -->

  <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Background="{ThemeResource TextBoxBackgroundColor}" BorderBrush="{ThemeResource TextBoxBorderColor}"
              BorderThickness="{ThemeResource TextBoxBorderThickness}" CornerRadius="{ThemeResource TextBoxCornerRadius}">
            <TextControl x:Name="TextControl" PreferredTextLength="{TemplateBinding Path=PreferredTextLength}"
                CaretIndex="{TemplateBinding Path=CaretIndex,Mode=TwoWay}" Text="{TemplateBinding Path=Text,Mode=TwoWay}"
                Color="{TemplateBinding Path=Color}" TextAlign="{TemplateBinding Path=TextAlign}"/>
            <Border.Triggers>
              <DataTrigger Binding="{Binding ElementName=TextControl,Path=HasFocus}" Value="True">
                <Setter Property="BorderBrush" Value="{ThemeResource TextBoxBorderFocusColor}"/>
              </DataTrigger>
            </Border.Triggers>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *********************************** Content GroupBox style ********************************* -->

  <Style x:Key="ContentGroupBoxStyle" TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="{ThemeResource ContentGroupBoxBorderColor}"/>
    <Setter Property="Background" Value="{ThemeResource ContentGroupBoxBackgroundColor}"/>
    <Setter Property="CornerRadius" Value="{ThemeResource ContentGroupBoxCornerRadius}"/>
  </Style>

  <!-- ************************* ListView item container styles ************************** -->

  <!-- An item list container represented by a standard "Button", scrolling its "ItemLabel" label when focused -->
  <Style x:Key="DefaultMenuItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{ThemeResource ButtonWideStyle}"
              Command="{DynamicResource ResourceKey=Menu_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
              IsEnabled="{Binding Enabled}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a simple list item -->
  <Style x:Key="DefaultItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <ContentPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a simple highlightable list item -->
  <Style x:Key="DefaultHighlightableItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Control Focusable="true"
              VerticalAlignment="Center" HorizontalAlignment="Stretch">
            <Control.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </Control.Triggers>
            <Control.TemplateControl>
              <ContentPresenter/>
            </Control.TemplateControl>
          </Control>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for dialog buttons which have a command associated in the ListItem -->
  <Style x:Key="DialogButtonContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{ThemeResource DialogButtonStyle}" Margin="5,0,5,0"
              Command="{Binding Command}" IsDefault="{Binding AdditionalProperties[IsDefault]}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
  </Style>

  <!-- Container style for an entry markable with a checkbox -->
  <Style x:Key="DefaultMultiMarkableItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <CheckBox x:Name="NameMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource CheckBoxStyle}"
              VerticalAlignment="Center" HorizontalAlignment="Stretch"
              IsChecked="{Binding Path=Selected,Mode=TwoWay}"
              Content="{Binding}">
            <CheckBox.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </CheckBox.Triggers>
          </CheckBox>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Data template for an entry markable with a radio button -->
  <Style x:Key="DefaultSingleMarkableItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <RadioButton x:Name="NameMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource RadioButtonStyle}"
              VerticalAlignment="Center" HorizontalAlignment="Stretch"
              IsChecked="{Binding Path=Selected,Mode=TwoWay}" GroupName="RadioButtonGroup"
              Content="{Binding}">
            <RadioButton.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </RadioButton.Triggers>
          </RadioButton>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a simple highlightable share -->
  <!-- Currently not used any more -->
  <Style x:Key="HighlightableShareContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Control Focusable="true" VerticalAlignment="Center" HorizontalAlignment="Stretch">
            <Control.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ShareName" Property="Scroll" Value="Auto"/>
                <Setter TargetName="SharePath" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </Control.Triggers>
            <Control.TemplateControl>
              <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
            </Control.TemplateControl>
          </Control>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a share item in a button -->
  <Style x:Key="SelectableShareContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{ThemeResource ButtonWideStyle}"
              VerticalAlignment="Center" HorizontalAlignment="Stretch"
              Command="{Binding Command}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ShareName" Property="Scroll" Value="Auto"/>
                <Setter TargetName="SharePath" Property="Scroll" Value="Auto"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a share entry markable with a checkbox in the shares list -->
  <Style x:Key="MultiMarkableShareContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <CheckBox x:Name="ShareMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource CheckBoxStyle}"
              VerticalAlignment="Center" HorizontalAlignment="Stretch"
              IsChecked="{Binding Path=Selected,Mode=TwoWay}"
              Content="{Binding}">
            <CheckBox.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ShareName" Property="Scroll" Value="Auto"/>
                <Setter TargetName="SharePath" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </CheckBox.Triggers>
          </CheckBox>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a share entry markable with a radio button in the shares list -->
  <Style x:Key="SingleMarkableShareContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <RadioButton x:Name="ShareMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource RadioButtonStyle}"
              VerticalAlignment="Center" HorizontalAlignment="Stretch"
              IsChecked="{Binding Path=Selected,Mode=TwoWay}" GroupName="RadioButtonGroup"
              Content="{Binding}">
            <RadioButton.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ShareName" Property="Scroll" Value="Auto"/>
                <Setter TargetName="SharePath" Property="Scroll" Value="Auto"/>
                <Setter TargetName="ItemControl" Property="Background">
                  <Setter.Value>
                    <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                  </Setter.Value>
                </Setter>
              </Trigger>
            </RadioButton.Triggers>
          </RadioButton>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ******************************* ListItem data templates for ListViews ********************************* -->

  <!-- A simple data template to show the Name of the ListItem in a Label -->
  <DataTemplate x:Key="DefaultItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Label x:Name="ItemLabel" Content="{Binding [Name]}" FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="DefaultItemDataStringProvider" Path="[Name]"/>

  <DataTemplate x:Key="MainMenuItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Label x:Name="ItemLabel" Content="{Binding [Name]}" Color="{ThemeResource TextColor}"/>
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="MainMenuItemDataStringProvider" Path="[Name]"/>

  <!-- A data template which shows the CoverArt/defaulticon, the Name and the Size of the ListItem -->
  <DataTemplate x:Key="ContentsMenuItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Image Thumbnail="True" Stretch="Uniform" Grid.Row="0" Grid.Column="0" Height="32" Width="32"
          Source="{Binding [ImageSrc]}" FallbackSource="{Binding [DefaultIconSrc]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Content="{Binding [Name]}"
          HorizontalAlignment="Left" VerticalAlignment="Center" FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="ContentsMenuItemDataStringProvider" Path="[Name]"/>

   <!-- A data template for a dialog menu item in list mode (each row has an image and a label) -->
  <DataTemplate x:Key="ImageDialogItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Image x:Name="Image" Thumbnail="True" Width="100" Height="100" Grid.Row="0" Grid.Column="0" Stretch="Uniform"
          Source="{Binding [ImageSrc]}" FallbackSource="{Binding [DefaultIconSrc]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Margin="10,0,0,0" Content="{Binding [Name]}"
          FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="ImageDialogItemDataStringProvider" Path="[Name]"/>

  <!-- Data template for a simple share entry in the shares list -->
  <DataTemplate x:Key="ShareItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="200"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Label x:Name="ShareName" Grid.Column="0" Content="{Binding [Name]}" FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
      <Label x:Name="SharePath" Grid.Column="1" Content="{Binding [Path]}" FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
<!-- Additionally available properties to show here:
      <Label x:Name="ShareProvider" Grid.Column="2" Content="{Binding AdditionalProperties[MediaProviderMetadata].Name}"
          FontSize="{ThemeResource SmallFontSize}"/>
      <Label x:Name="Categories" Grid.Column="3" Content="{Binding [Categories]}" FontSize="{ThemeResource SmallFontSize}"/>
-->
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="ShareItemDataStringProvider" Path="[Name]"/>

  <!-- ***************************** ListView styles ********************************* -->

  <!-- Standard ListView properties. The properties "ItemTemplate", "ItemContainerStyle" and "DataStringProvider" have to be completed. -->
  <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="true"
              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel x:Name="ListItemsHost" IsItemsHost="True" Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ListView style to be used for main menu -->
  <Style x:Key="MainMenuListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource MainMenuItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource MainMenuItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for all menus (main menu, dialog menus, context menus, ...) -->
  <Style x:Key="MenuListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource DefaultItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used in the content area of the screens -->
  <Style x:Key="ContentsMenuListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource ContentsMenuItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource ContentsMenuItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <VirtualizingStackPanel x:Name="ListItemsHost" IsItemsHost="True" Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SharesListViewStyle" BasedOn="{ThemeResource ContentsMenuListViewStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="true"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=!IsEmpty}"
                Background="{ThemeResource ItemsControlShadowBackgroundColor}">
              <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
            </ScrollViewer>
            <Label Content="[SharesConfig.NoSharesInThisView]" IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsEmpty}"
                Color="{ThemeResource HintTextColor}" FontSize="{ThemeResource SmallFontSize}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource ShareItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource ShareItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource SelectableShareContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="MultiMarkableSharesListViewStyle" BasedOn="{ThemeResource ContentsMenuListViewStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="true"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=!IsEmpty}"
                Background="{ThemeResource ItemsControlShadowBackgroundColor}">
              <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
            </ScrollViewer>
            <Label Content="[SharesConfig.NoSharesInThisView]" IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsEmpty}"
                Color="{ThemeResource HintTextColor}" FontSize="{ThemeResource SmallFontSize}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource ShareItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource ShareItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource MultiMarkableShareContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SingleMarkableSharesListViewStyle" BasedOn="{ThemeResource ContentsMenuListViewStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="true"
                HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=!IsEmpty}"
                Background="{ThemeResource ItemsControlShadowBackgroundColor}">
              <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
            </ScrollViewer>
            <Label Content="[SharesConfig.NoSharesInThisView]" IsVisible="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsEmpty}"
                Color="{ThemeResource HintTextColor}" FontSize="{ThemeResource SmallFontSize}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource ShareItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource ShareItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource SingleMarkableShareContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for lists where multiple items can be marked -->
  <Style x:Key="MultiMarkableListViewStyle" BasedOn="{ThemeResource ContentsMenuListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource DefaultItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMultiMarkableItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for lists where a single item can be marked -->
  <Style x:Key="SingleMarkableListViewStyle" BasedOn="{ThemeResource ContentsMenuListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource DefaultItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultSingleMarkableItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for menus which display an image with a label -->
  <Style x:Key="ImageDialogListViewStyle" BasedOn="{ThemeResource MenuListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource ImageDialogItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource ImageDialogItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ************************** TreeView item container styles ***************************** -->

  <!-- Tree item container which shows a PlusMinus button and the item content, in expanded state a sub stack panel unter the first line -->
  <Style x:Key="DefaultTreeItemContainerStyle" TargetType="{x:Type HeaderedItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <CheckBox x:Name="Expander" Grid.Column="0" Grid.Row="0" Style="{ThemeResource PlusMinusButtonStyle}"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpandable}"
                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded,Mode=TwoWay}"
                Command="{DynamicResource ResourceKey=Expander_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                VerticalAlignment="Top"/>
            <ContentPresenter x:Name="TreeItemContentPresenter" Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Stretch"/>
            <StackPanel x:Name="SubItemsHost" Grid.Column="1" Grid.Row="1"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded}">
              <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Top"/>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <BindingSetter Property="IsExpanded" BindingWrapper="{DynamicResource ResourceKey=Expander_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </Style>

  <!-- Tree item container which shows a PlusMinus button and a radio button in front of the item content, in expanded state a sub stack panel unter the first line -->
  <Style x:Key="DefaultSingleMarkableTreeItemContainerStyle" TargetType="{x:Type HeaderedItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <CheckBox x:Name="Expander" Grid.Column="0" Grid.Row="0" Style="{ThemeResource PlusMinusButtonStyle}"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpandable}"
                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded,Mode=TwoWay}"
                Command="{DynamicResource ResourceKey=Expander_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                VerticalAlignment="Center"/>
            <RadioButton x:Name="Checker" GroupName="RadioButtonGroup" Grid.Column="1" Grid.Row="0"
                Style="{ThemeResource RadioButtonStyle}" VerticalAlignment="Center" HorizontalAlignment="Stretch"
                IsChecked="{PickupBinding Source={DynamicResource ResourceKey=IsChecked_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}}"
                Command="{DynamicResource ResourceKey=Checker_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                Content="{Binding}">
              <RadioButton.Triggers>
                <Trigger Property="HasFocus" Value="True">
                  <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
                  <Setter TargetName="ItemControl" Property="Background">
                    <Setter.Value>
                      <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </RadioButton.Triggers>
            </RadioButton>
            <StackPanel x:Name="SubItemsHost" Grid.Column="1" Grid.Row="1"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded}">
              <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Top"/>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <BindingSetter Property="IsExpanded" BindingWrapper="{DynamicResource ResourceKey=Expander_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </Style>

  <!-- Tree item container which shows a PlusMinus button and a checkbox in front of the item content, in expanded state a sub stack panel unter the first line -->
  <Style x:Key="DefaultMultiMarkableTreeItemContainerStyle" TargetType="{x:Type HeaderedItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
          <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <CheckBox x:Name="Expander" Grid.Column="0" Grid.Row="0" Style="{ThemeResource PlusMinusButtonStyle}"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpandable}"
                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded,Mode=TwoWay}"
                Command="{DynamicResource ResourceKey=Expander_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                VerticalAlignment="Center"/>
            <CheckBox x:Name="Checker" Style="{ThemeResource CheckBoxStyle}"
                Grid.Column="1" Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Stretch"
                IsChecked="{PickupBinding Source={DynamicResource ResourceKey=IsChecked_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}}"
                Command="{DynamicResource ResourceKey=Checker_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                Content="{Binding}">
              <CheckBox.Triggers>
                <Trigger Property="HasFocus" Value="True">
                  <Setter TargetName="ItemLabel" Property="Scroll" Value="Auto"/>
                  <Setter TargetName="ItemControl" Property="Background">
                    <Setter.Value>
                      <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
                    </Setter.Value>
                  </Setter>
                </Trigger>
              </CheckBox.Triggers>
            </CheckBox>
            <StackPanel x:Name="SubItemsHost" Grid.Column="1" Grid.Row="1"
                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded}">
              <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Top"/>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <BindingSetter Property="IsExpanded" BindingWrapper="{DynamicResource ResourceKey=Expander_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </Style>

  <!-- ************************ TreeItem data templates for TreeViews *************************** -->

  <!-- A data template for a default TreeItem -->
  <DataTemplate x:Key="DefaultTreeItemDataTemplate" DataType="{x:Type collections:TreeItem}">
    <!-- Extra grid necessary because we need a label (ItemLabel) to scroll and a panel (ItemControl) to
         set the background color when selected -->
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Label x:Name="ItemLabel" Content="{Binding [Name]}" FontSize="{ThemeResource SmallFontSize}" Color="{ThemeResource TextColor}"/>
    </Grid>
  </DataTemplate>

  <DataStringProvider x:Key="DefaultTreeItemDataStringProvider" Path="[Name]"/>
  <SubItemsProvider x:Key="DefaultTreeItemSubItemsProvider" Path="SubItems"/>

  <!-- ****************************** TreeView styles ********************************** -->

  <!-- Standard TreeView properties. Property "ItemContainerStyle" has to be completed. -->
  <Style x:Key="DefaultTreeViewStyle" TargetType="{x:Type TreeView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="false"
              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <ItemsPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel x:Name="TreeItemsHost" IsItemsHost="True" Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultTreeItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource DefaultTreeItemDataStringProvider}"/>
    <Setter Property="SubItemsProvider" Value="{ThemeResource DefaultTreeItemSubItemsProvider}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <Style x:Key="DefaultMultiMarkableTreeViewStyle" BasedOn="{ThemeResource DefaultTreeViewStyle}">
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMultiMarkableTreeItemContainerStyle}"/>
  </Style>

  <Style x:Key="DefaultSingleMarkableTreeViewStyle" BasedOn="{ThemeResource DefaultTreeViewStyle}">
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultSingleMarkableTreeItemContainerStyle}"/>
    <Setter Property="RadioButton.GroupContext" Value="RadioButtonGroup"/>
  </Style>

  <!-- ****************************** Keybindings ListView ********************************** -->

  <Style x:Key="KeyBindingContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <StackPanel>
            <ContentPresenter Margin="5"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="KeyBindingItemDataTemplate" DataType="{x:Type KeyBindingControl}">
    <ContentPresenter Content="{Binding}"/>
  </DataTemplate>

  <DataStringProvider x:Key="KeyBindingItemDataStringProvider" Path="Key.Name"/>

  <Style x:Key="KeyBindingsListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <ItemsPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel x:Name="KeyBindingsPanel" IsItemsHost="True" Orientation="Vertical"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource KeyBindingItemDataTemplate}"/>
    <Setter Property="DataStringProvider" Value="{ThemeResource KeyBindingItemDataStringProvider}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource KeyBindingContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource KeyBindingsPanelBackgroundBrush}"/>
  </Style>

  <!-- ****************************** PlayerControl ********************************** -->

  <Style x:Key="PlayerControlGroupBoxStyle">
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Color="{ThemeResource DefaultPlayerControlBorderColor}"/>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="{ThemeResource DefaultPlayerControlBorderThickness}"/>
    <Setter Property="CornerRadius" Value="{ThemeResource DefaultPlayerControlCornerRadius}"/>
    <Setter Property="HeaderColor" Value="{ThemeResource DefaultPlayerControlTitleColor}"/>
    <Setter Property="FontSize" Value="{ThemeResource SmallFontSize}"/>
  </Style>

  <Storyboard x:Key="DefaultCurrentPlayerControlStoryboard" FillBehavior="Stop">
    <!-- TODO: nicer background cycle effect -->
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="PCGroupBox" Storyboard.TargetProperty="BorderBrush.Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBorderColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="PCGroupBox" Storyboard.TargetProperty="HeaderColor">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlTitleColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="PCGroupBox" Storyboard.TargetProperty="Background.GradientStops[0].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor1}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="PCGroupBox" Storyboard.TargetProperty="Background.GradientStops[1].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor2}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="PCGroupBox" Storyboard.TargetProperty="Background.GradientStops[2].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor3}"/>
    </ColorAnimationUsingKeyFrames>
  </Storyboard>

  <Storyboard x:Key="PlayerControlShowMouseControlsStoryboard" FillBehavior="HoldEnd">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseControlsPanel" Storyboard.TargetProperty="LayoutTransform.Children[0].ScaleY">
      <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.03" Value="0.4"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.06" Value="0.7"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.09" Value="0.9"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.12" Value="0.97"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.15" Value="1"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>

  <Storyboard x:Key="PlayerControlHideMouseControlsStoryboard" FillBehavior="Stop">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseControlsPanel" Storyboard.TargetProperty="LayoutTransform.Children[0].ScaleY">
      <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
      <SplineDoubleKeyFrame KeyTime="00:00:00.05" Value="0"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>

  <Style x:Key="DefaultPlayerControlStyle" TargetType="{x:Type mp_special_controls:PlayerControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type mp_special_controls:PlayerControl}">
          <GroupBox x:Name="PCGroupBox" Style="{ThemeResource PlayerControlGroupBoxStyle}"
              DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
              Header="{Binding Title}">
            <GroupBox.Background>
              <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="0"/>
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="0.5"/>
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="1"/>
              </LinearGradientBrush>
            </GroupBox.Background>
            <GroupBox.Triggers>
              <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                  <BeginStoryboard x:Name="PlayerControlShowMouseControls_BeginStoryboard" Storyboard="{ThemeResource PlayerControlShowMouseControlsStoryboard}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                  <BeginStoryboard x:Name="PlayerControlHideMouseControls_BeginStoryboard" Storyboard="{ThemeResource PlayerControlHideMouseControlsStoryboard}"/>
                </Trigger.ExitActions>
                <Trigger.Setters>
                  <Setter TargetName="AudioIndicatorNoMouse" Property="IsVisible" Value="False"/>
                  <Setter TargetName="AudioIndicatorButton" Property="IsVisible" Value="True"/>
                </Trigger.Setters>
              </Trigger>
            </GroupBox.Triggers>
            <StackPanel Orientation="Vertical">
              <Grid x:Name="MediaInfoPanel" Margin="5" HorizontalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid x:Name="PlayerStatePanel" Grid.Row="0" Grid.Column="0">
                  <Control x:Name="StatePlay" IsVisible="{Binding IsPlaying}" Template="{ThemeResource PlayControlTemplate}"
                      VerticalAlignment="Center"/>
                  <Control x:Name="StatePause" IsVisible="{Binding IsPaused}" Template="{ThemeResource PauseControlTemplate}"
                      VerticalAlignment="Center"/>
                  <Control x:Name="StateForward" IsVisible="{Binding IsSeekingForward}" Template="{ThemeResource ForwardControlTemplate}"
                      VerticalAlignment="Center"/>
                  <Control x:Name="StateRewind" IsVisible="{Binding IsSeekingBackward}" Template="{ThemeResource RewindControlTemplate}"
                      VerticalAlignment="Center"/>
                  <Label x:Name="SeekHint" FontSize="{ThemeResource TinyFontSize}" Content="{Binding SeekHint}" Color="{ThemeResource TextColor}"/>
                </Grid>
                <Label x:Name="MediaItemTitle" Grid.Row="0" Grid.Column="1" Color="{ThemeResource DefaultPlayerControlMediaItemColor}"
                    Content="{Binding MediaItemTitle}" HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                <Grid x:Name="AudioPanel" Grid.Row="0" Grid.Column="2" Margin="5,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"
                    IsVisible="{Binding HasAudio}">
                  <Grid Name="AudioIndicatorNoMouse">
                    <Control x:Name="AudioSimple" IsVisible="{Binding IsAudio}" Template="{ThemeResource AudioActiveControlTemplate}"
                        VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <Control x:Name="MuteOnOffSimple" Template="{ThemeResource MuteOnOffControlTemplate}"
                        VerticalAlignment="Center" HorizontalAlignment="Center">
                      <Control.IsVisible>
                        <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} &amp;&amp; {1}">
                          <Binding Path="IsAudio"/>
                          <Binding Path="IsMuted"/>
                        </MultiBinding>
                      </Control.IsVisible>
                    </Control>
                  </Grid>
                  <Grid Name="AudioIndicatorButton" IsVisible="False">
                    <Button x:Name="AudioActiveButton" IsVisible="{Binding IsAudio}" Style="{ThemeResource AudioActiveButtonStyle}"
                        Command="{Command AudioButtonPressed}"/>
                    <Button x:Name="AudioInactiveButton" IsVisible="{Binding !IsAudio}" Style="{ThemeResource AudioInactiveButtonStyle}"
                        Command="{Command AudioButtonPressed}"/>
                  </Grid>
                </Grid>
              </Grid>
              <StackPanel HorizontalAlignment="Stretch" Orientation="Horizontal" Margin="0,5,0,5"> <!-- Workaround to avoid layouting problems with LayoutTransform -->
                <StackPanel x:Name="MouseControlsPanel" Orientation="Horizontal" IsVisible="{Binding ShowMouseControls}">
                  <StackPanel.LayoutTransform>
                    <TransformGroup>
                      <ScaleTransform ScaleX="1" ScaleY="0"/>
                    </TransformGroup>
                  </StackPanel.LayoutTransform>
                  <Button x:Name="SkipBackButton" Style="{ThemeResource SkipBackButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSkipBack}"
                      Command="{Command Previous}"/>
                  <Button x:Name="RewindButton" Style="{ThemeResource RewindButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSeekBackward}"
                      Command="{Command SeekBackward}"/>
                  <Button x:Name="PlayButton" Style="{ThemeResource PlayButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanPlay}"
                      Command="{Command Play}"/>
                  <Button x:Name="PauseButton" Style="{ThemeResource PauseButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanPause}"
                      Command="{Command Pause}"/>
                  <Button x:Name="StopButton" Style="{ThemeResource StopButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanStop}"
                      Command="{Command Stop}"/>
                  <Button x:Name="ForwardButton" Style="{ThemeResource ForwardButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSeekForward}"
                      Command="{Command SeekForward}"/>
                  <Button x:Name="SkipForwardButton" Style="{ThemeResource SkipForwardButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSkipForward}"
                      Command="{Command Next}"/>
                </StackPanel>
              </StackPanel>
            </StackPanel>
          </GroupBox>
          <ControlTemplate.Triggers>
            <Trigger Property="IsCurrentPlayer" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="CurrentPlayer_BeginStoryboard" Storyboard="{ThemeResource DefaultCurrentPlayerControlStoryboard}"/>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="CurrentPlayer_BeginStoryboard"/>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ****************************** Workflow navigation bar ********************************** -->

  <Storyboard x:Key="FocusedNavbarContainerStoryboard" FillBehavior="HoldEnd">
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_LineLeft" Storyboard.TargetProperty="Stroke">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerStrokeColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_LineLeft" Storyboard.TargetProperty="Fill">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerFillColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_ArrowLeft" Storyboard.TargetProperty="Stroke">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerStrokeColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_ArrowLeft" Storyboard.TargetProperty="Fill">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerFillColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_Center_Back" Storyboard.TargetProperty="Fill">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerFillColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_Center_Border" Storyboard.TargetProperty="Stroke">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerStrokeColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_ArrowRight" Storyboard.TargetProperty="Stroke">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerStrokeColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="WorkflowNavigationBarItemContainer_ArrowRight" Storyboard.TargetProperty="Fill">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"/>
      <SplineColorKeyFrame KeyTime="00:00:00.4" Value="{ThemeResource FocusedWorkflowNavigationBarItemContainerFillColor}"/>
    </ColorAnimationUsingKeyFrames>
  </Storyboard>

  <!-- Container style for the entries in the workflow navigation bar -->
  <Style x:Key="WorkflowNavigationBarContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <!-- Available data in the given ListViewItem:
               - AdditionalProperties[IsFirst] is true for the first item
               - Executing the Command will navigate the workflow to the underlaying workflow state
          -->
          <Button Command="{Binding Command}">
            <Button.TemplateControl>
              <Grid>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="15"/>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="15"/>
                </Grid.ColumnDefinitions>
                <Path x:Name="WorkflowNavigationBarItemContainer_LineLeft" Grid.Row="0" Grid.Column="0" Stretch="Fill"
                    IsVisible="{Binding AdditionalProperties[IsFirst]}"
                    Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                    Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                    Data="M20,0 L0,0 0,20 20,20"/>
                <Path x:Name="WorkflowNavigationBarItemContainer_ArrowLeft" Grid.Row="0" Grid.Column="0" Stretch="Fill"
                    IsVisible="{Binding !AdditionalProperties[IsFirst]}"
                    Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                    Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                    Data="M30,0 L0,0 20,10 0,20 30,20"/>
                <Path x:Name="WorkflowNavigationBarItemContainer_Center_Back" Grid.Row="0" Grid.Column="1" Stretch="Fill"
                    Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                    Data="M0,0 L100,0 L100,20 0,20 z"/>
                <Path x:Name="WorkflowNavigationBarItemContainer_Center_Border" Grid.Row="0" Grid.Column="1" Stretch="Fill"
                    Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                    Data="M100,0 L0,0 M0,20 L100,20"/>
                <Path x:Name="WorkflowNavigationBarItemContainer_ArrowRight" Grid.Row="0" Grid.Column="2" Stretch="Fill"
                    Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                    Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                    Data="M0,0 L10,0 30,10 10,20 0,20"/>
                <ContentPresenter Grid.Row="0" Grid.Column="1" x:Name="WorkflowNavibationItemContentPresenter" HorizontalAlignment="Stretch"/>
              </Grid>
            </Button.TemplateControl>
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Trigger.EnterActions>
                  <BeginStoryboard x:Name="Focused_BeginStoryboard" Storyboard="{ThemeResource FocusedNavbarContainerStoryboard}"/>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                  <StopStoryboard BeginStoryboardName="Focused_BeginStoryboard"/>
                </Trigger.ExitActions>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Data template for contents of workflow navigation bar entries -->
  <DataTemplate x:Key="WorkflowNavigationBarItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Grid x:Name="ItemControl" VerticalAlignment="Center" HorizontalAlignment="Stretch">
      <Label x:Name="ItemLabel" Margin="2" Content="{Binding [Name]}" Color="{ThemeResource WorkflowNavigationBarFontColor}"/>
    </Grid>
  </DataTemplate>

  <!-- Control which is used to symbolize the ellipsis of some entries when the workflow navigation bar is too long for the available space -->
  <Style x:Key="WorkflowNavigationBarEllipsisControlStyle" TargetType="{x:Type Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Label Content="..." Margin="10" Color="{ThemeResource WorkflowNavigationBarFontColor}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="WorkflowNavigationBarStyle" TargetType="{x:Type mp_special_controls:WorkflowNavigationBar}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <ListView ItemsSource="{TemplateBinding NavigationItems}">
            <ListView.Style>
              <Style>
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate>
                      <ItemsPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate" Value="{ThemeResource WorkflowNavigationBarItemDataTemplate}"/>
                <Setter Property="ItemContainerStyle" Value="{ThemeResource WorkflowNavigationBarContainerStyle}"/>
                <Setter Property="ItemsPanel">
                  <Setter.Value>
                    <ItemsPanelTemplate>
                      <mp_special_controls:WorkflowNavigationBarPanel x:Name="WorkflowNavigationBarItemsHost" IsItemsHost="True"
                          Margin="10" Orientation="Horizontal" VerticalAlignment="Top"
                          EllipsisControlStyle="{ThemeResource WorkflowNavigationBarEllipsisControlStyle}"/>
                    </ItemsPanelTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ListView.Style>
          </ListView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ****************************** Players ********************************** -->

  <Style x:Key="PipControlStyle" TargetType="{x:Type Control}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <mp_special_controls:PlayerControl x:Name="PiPControl" AutoVisibility="True" PlayerContext="SecondaryPlayer"
              FixedVideoWidth="{ThemeResource PiPVideoWidth}">
            <mp_special_controls:PlayerControl.TemplateControl>
              <Border x:Name="PiPControlBorder"
                  DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                  BorderBrush="{ThemeResource PipBorderColor}" BorderThickness="{ThemeResource PipBorderThickness}">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                  </Grid.ColumnDefinitions>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                  </Grid.RowDefinitions>
                  <Control IsVisible="{Binding IsVideoPlayerPresent}" Width="{Binding VideoWidth}" Height="{Binding VideoHeight}">
                    <Control.Background>
                      <VideoBrush Stream="1"/>
                    </Control.Background>
                  </Control>
                  <Image IsVisible="{Binding IsPicturePlayerPresent}" Width="{ThemeResource PiPVideoWidth}" Stretch="Uniform"
                      Source="{Binding PictureSourcePath}"/>
                </Grid>
              </Border>
            </mp_special_controls:PlayerControl.TemplateControl>
          </mp_special_controls:PlayerControl>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ****************************** Notification area ********************************** -->

  <Model x:Key="NotificationsModel" Id="843F373D-0B4B-47ba-8DD1-0D18F00FAAD3"/>

  <Style x:Key="NotificationControlStyle" TargetType="{x:Type ContentPresenter}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentPresenter}">
          <StackPanel Context="{StaticResource NotificationsModel}" IsVisible="{Binding IsNotificationsHintVisible}" Orientation="Horizontal">
            <Button Command="{Command GoToNotification}" Style="{ThemeResource ButtonStyle}">
              <Grid> <!-- Outer grid is needed because of DataContext used by Button -->
                <Grid Context="{StaticResource NotificationsModel}"> <!-- Need to repeat the context here because the Button (ContentControl) sets the DataContext on the Content element -->
                  <Image Source="{Binding NotificationSymbolRelFilePath}" Width="48" Stretch="Uniform"/>
                  <StackPanel Orientation="Horizontal" IsVisible="{Binding IsMoreThanOneNotificationAvailable}"
                      HorizontalAlignment="Right" VerticalAlignment="Bottom">
                    <Label Content="(" FontSize="{ThemeResource TinyFontSize}" Color="{ThemeResource TextColor}"/>
                    <Label Content="{Binding NumNotificationsTotal}" FontSize="{ThemeResource TinyFontSize}" Color="{ThemeResource TextColor}"/>
                    <Label Content=")" FontSize="{ThemeResource TinyFontSize}" Color="{ThemeResource TextColor}"/>
                  </StackPanel>
                </Grid>
              </Grid>
            </Button>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
