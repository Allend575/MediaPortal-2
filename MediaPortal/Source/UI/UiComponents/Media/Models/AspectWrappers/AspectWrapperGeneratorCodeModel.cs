#region Copyright (C) 2007-2015 Team MediaPortal

/*
    Copyright (C) 2007-2015 Team MediaPortal
    http://www.team-mediaportal.com

    This file is part of MediaPortal 2

    MediaPortal 2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MediaPortal 2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MediaPortal 2. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

using System;
using System.Collections.Generic;
using MediaPortal.Common.General;
using MediaPortal.Common.MediaManagement;
using MediaPortal.Common.MediaManagement.DefaultItemAspects;
using MediaPortal.UI.SkinEngine.Controls.Visuals;

namespace MediaPortal.UiComponents.Media.Models.AspectWrappers_FromCodeModel
{
  /// <summary>AudioAlbumAspectWrapper wraps the contents of <see cref="AudioAlbumAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class AudioAlbumAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>AudioAspectWrapper wraps the contents of <see cref="AudioAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class AudioAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>CharacterAspectWrapper wraps the contents of <see cref="CharacterAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class CharacterAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>CompanyAspectWrapper wraps the contents of <see cref="CompanyAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class CompanyAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>DirectoryAspectWrapper wraps the contents of <see cref="DirectoryAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class DirectoryAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>EpisodeAspectWrapper wraps the contents of <see cref="EpisodeAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class EpisodeAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>ExternalIdentifierAspectWrapper wraps the contents of <see cref="ExternalIdentifierAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class ExternalIdentifierAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>ImageAspectWrapper wraps the contents of <see cref="ImageAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class ImageAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>ImporterAspectWrapper wraps the contents of <see cref="ImporterAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class ImporterAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>MediaAspectWrapper wraps the contents of <see cref="MediaAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class MediaAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>MovieAspectWrapper wraps the contents of <see cref="MovieAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class MovieAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>MovieCollectionAspectWrapper wraps the contents of <see cref="MovieCollectionAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class MovieCollectionAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>PersonAspectWrapper wraps the contents of <see cref="PersonAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class PersonAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>ProviderResourceAspectWrapper wraps the contents of <see cref="ProviderResourceAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class ProviderResourceAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>RelationshipAspectWrapper wraps the contents of <see cref="RelationshipAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class RelationshipAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>SeasonAspectWrapper wraps the contents of <see cref="SeasonAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class SeasonAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>SeriesAspectWrapper wraps the contents of <see cref="SeriesAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class SeriesAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>SubtitleAspectWrapper wraps the contents of <see cref="SubtitleAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class SubtitleAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>ThumbnailLargeAspectWrapper wraps the contents of <see cref="ThumbnailLargeAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class ThumbnailLargeAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>VideoAspectWrapper wraps the contents of <see cref="VideoAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class VideoAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>VideoAudioStreamAspectWrapper wraps the contents of <see cref="VideoAudioStreamAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class VideoAudioStreamAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

  /// <summary>VideoStreamAspectWrapper wraps the contents of <see cref="VideoStreamAspect"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class VideoStreamAspectWrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

}
