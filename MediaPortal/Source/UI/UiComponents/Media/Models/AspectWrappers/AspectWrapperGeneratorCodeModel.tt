<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
#region Copyright (C) 2007-2015 Team MediaPortal

/*
    Copyright (C) 2007-2015 Team MediaPortal
    http://www.team-mediaportal.com

    This file is part of MediaPortal 2

    MediaPortal 2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MediaPortal 2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MediaPortal 2. If not, see <http://www.gnu.org/licenses/>.
*/

#endregion

using System;
using System.Collections.Generic;
using MediaPortal.Common.General;
using MediaPortal.Common.MediaManagement;
using MediaPortal.Common.MediaManagement.DefaultItemAspects;
using MediaPortal.UI.SkinEngine.Controls.Visuals;

namespace MediaPortal.UiComponents.Media.Models.AspectWrappers_FromCodeModel
{
<#
	string aspectNamespace = "MediaPortal.Common.MediaManagement.DefaultItemAspects";	
	
	var project = GetProject("MediaPortal.Common");
	var items = GetProjectItemsRecursively(project.ProjectItems);
	var classes = GetCodeClasses(items, aspectNamespace);
	
	foreach(var aspectClass in classes)
    {
		if (!aspectClass.IsShared)
			continue;

		bool multiAspect = false;
		
		var metadataField = GetMetadata(aspectClass, out multiAspect);
		if (metadataField == null)
			continue;
 
		foreach(var codeAttr in GetAttributes(aspectClass))
        {
			// need to evaluate this expression string:
			//WriteLine(codeAttr.InitExpression.ToString());
        }
	
	#>
  /// <summary><#= aspectClass.Name #>Wrapper wraps the contents of <see cref="<#= aspectClass.Name #>"/> into properties that can be bound from xaml controls.</summary>
  /// <remarks>This code was generated by a template.</remarks>
  public class <#= aspectClass.Name #>Wrapper : Control
  {
    #region Constants

    public static readonly ICollection<string> EMPTY_STRING_COLLECTION = new List<string>().AsReadOnly();

    #endregion
  }

<#
    }
#>
}
<#+ 

	private EnvDTE.DTE _DTE = null;

	/// <summary>
	/// Returns a reference to the primary management object of Visual Studio
	/// <summary>
	public EnvDTE.DTE DTE
	{
		get
		{
			if (_DTE == null)
            {
				var hostServiceProvider = this.Host as IServiceProvider;
				if (hostServiceProvider != null)
					_DTE = hostServiceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            }
			return _DTE;
		}
	}

	private List<EnvDTE.Project> GetProjectsFromItemsCollection(EnvDTE.ProjectItems items)
    {
		var ret = new List<EnvDTE.Project>();

		foreach(EnvDTE.ProjectItem item in items)
        {
			if (item.SubProject == null)
				continue;
			else if (item.SubProject.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(item.SubProject.ProjectItems));
			else 
				ret.Add(item.SubProject);
        }

		return ret;
    }

	/// <summary>
	/// Gets a list of all Projects within the solution
	/// </summary>
	public IEnumerable<EnvDTE.Project> GetAllProjects()
    {
		var ret = new List<EnvDTE.Project>();

		// take all projects that are at top level of the solution
		// and recursively search Project folders
		var topLevelProjects = this.DTE.Solution.Projects;

		foreach(EnvDTE.Project project in topLevelProjects)
        {
			if (project.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder)
				ret.AddRange(GetProjectsFromItemsCollection(project.ProjectItems));
			else
				ret.Add(project);
        }

		return ret;
    }

	/// <summary>
	/// Gets the project object within the current solution by a given project name.
	/// </summary>
	public EnvDTE.Project GetProject(string projectName)
    {
		return this.GetAllProjects()
				   .Where(p => p.Name == projectName)
				   .FirstOrDefault();
    }

	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<EnvDTE.ProjectItem>();
		if (items == null) return ret;
		foreach(EnvDTE.ProjectItem item in items)
		{
			ret.Add(item);
			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}
		return ret;
	}

	public List<EnvDTE80.CodeClass2> GetCodeClasses(List<EnvDTE.ProjectItem> projectItems, string fullNamespace)
    {
		var result = new List<EnvDTE80.CodeClass2>();

		foreach(var item in projectItems)
		{
			if (item.FileCodeModel != null)
			{
				foreach(EnvDTE.CodeElement elem in item.FileCodeModel.CodeElements)
				{
					if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace && elem.FullName == fullNamespace)
					{
						var ns = elem as EnvDTE.CodeNamespace;
						result.AddRange(ns.Members.OfType<EnvDTE80.CodeClass2>());
					}
				}
			}
		}

		return result;
    }

	public EnvDTE80.CodeElement2 GetMember(EnvDTE80.CodeClass2 codeClass, EnvDTE.vsCMElement kind, string name)
    {
		foreach(EnvDTE80.CodeElement2 member in codeClass.Members)
        {
			if (member.Kind == kind && member.Name == name)
				return member;
        }

		return null;
    }

	public bool HasBaseClass(EnvDTE.CodeType codeType, string fullBaseClassTypeName)
    {
		foreach(var aBase in codeType.Bases)
        {
			var baseClass = aBase as EnvDTE80.CodeClass2;
			if (baseClass != null)
            {
				if (baseClass.FullName == fullBaseClassTypeName)
                {
					return true;
                }
            }
        }
		return false;
    }

	public EnvDTE80.CodeVariable2 GetMetadata(EnvDTE80.CodeClass2 codeClass, out bool multiAspect)
    {
		multiAspect = false;

		var metadataField = GetMember(codeClass, EnvDTE.vsCMElement.vsCMElementVariable, "Metadata") as EnvDTE80.CodeVariable2;

		if (metadataField == null || 
			metadataField.Access != EnvDTE.vsCMAccess.vsCMAccessPublic ||
			!HasBaseClass(metadataField.Type.CodeType, "MediaPortal.Common.MediaManagement.MediaItemAspectMetadata"))
			return null;
			
		multiAspect = metadataField.Type.AsFullName == "MediaPortal.Common.MediaManagement.MultipleMediaItemAspectMetadata";

		return metadataField;
    }
	
	public List<EnvDTE80.CodeVariable2> GetAttributes(EnvDTE80.CodeClass2 codeClass)
    {
		var result = new List<EnvDTE80.CodeVariable2>();

		foreach(EnvDTE80.CodeElement2 member in codeClass.Members)
        {
			if (member.Kind == EnvDTE.vsCMElement.vsCMElementVariable)
            {
				var codeVar = member as EnvDTE80.CodeVariable2;
				if (codeVar == null || 
					codeVar.Access != EnvDTE.vsCMAccess.vsCMAccessPublic ||
					!HasBaseClass(codeVar.Type.CodeType, "MediaPortal.Common.MediaManagement.MediaItemAspectMetadata.AttributeSpecification"))
					continue;

				result.Add(codeVar);
            }
        }

		return result;
    }
#>
